// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ZDThemeKit
import Foundation
import Swift
import UIKit
@_exported import ZDThemeKit
@objc public protocol ZDThemeProtocol {
  @objc optional var applicationColor: UIKit.UIColor { get }
  @objc optional var navigationBarBackgroundColor: UIKit.UIColor { get }
  @objc optional var navigationBarTitleColor: UIKit.UIColor { get }
  @objc optional var navigationBarButtonColor: UIKit.UIColor { get }
  @objc optional var primaryBackgroundColor: UIKit.UIColor { get }
  @objc optional var secondaryBackgroundColor: UIKit.UIColor { get }
  @objc optional var tertiaryBackgroundColor: UIKit.UIColor { get }
  @objc optional var primaryTextColor: UIKit.UIColor { get }
  @objc optional var secondaryTextColor: UIKit.UIColor { get }
  @objc optional var tertiaryTextColor: UIKit.UIColor { get }
}
@objc public enum ZDThemeType : Swift.Int {
  case light
  case dark
  @available(iOS 13.0, *)
  case system
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ZDThemeManager : ObjectiveC.NSObject {
  @objc public static var selectedThemeType: ZDThemeKit.ZDThemeType
  @objc public static var selectedTheme: ZDThemeKit.ZDThemeProtocol {
    @objc get
  }
  @objc public static func setTheme(type theme: ZDThemeKit.ZDThemeType)
  @objc public static func updateTheme(theme: ZDThemeKit.ZDThemeProtocol)
  @objc public static func updateDarkTheme(theme: ZDThemeKit.ZDThemeProtocol)
  @objc deinit
  @objc override dynamic public init()
}
extension ZDThemeKit.ZDThemeType : Swift.Equatable {}
extension ZDThemeKit.ZDThemeType : Swift.Hashable {}
extension ZDThemeKit.ZDThemeType : Swift.RawRepresentable {}
